1.
>>file3 cat -e somefile | <file1 <file2 <file_access_denied <<1 cat -e | ls -lA | cat -e
Условия:
file1 и file2 должны быть созданы и иметь права на чтение
file_access_denied должен быть создан и у него нужно убрать права на чтение
somefile должен быть создан, иметь права на чтение и содержать какой-то текст
Суть:
Тест на порядок выполнения heredoc.
В момент ожидания стоп-слова от heredoc ещё не должен быть создан file3. Это
говорит о том, что heredoc выполняется при парсинге команды. Если бы heredoc
выполнялся после парсинга команды, то сначала должна была выполниться команда
>file3 cat -e somefile, а только потом вылететь ошибка про отсутствие прав на
чтение для file_access_denied.

2.
./sleeper 120 >file_s20 | ./sleeper 130 > file_s1 | < file_s2 ./sleeper 140 >file_s3 | ./sleeper 150 | ./sleeper 200
Позволяет убедиться, что процессы запускаются параллельно.
Команды, которые помогут:
 а) ps -au{username} --forest (--forest только для linux) - получить PID процессов
 б) lsof -p <PID> - получить список открытых файловых дескрипторов по номеру процесса
 в) tail -f <pathname> - открыть файл в режиме мониторинга, чтоб видеть, как в него пишутся данные
